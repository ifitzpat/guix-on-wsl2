* Setting up WSL
https://github.com/sirredbeard/Awesome-WSL#x-servers
http://guix.gnu.org/en/manual/en/guix.html#System-Installation
* Setting up Guix as a WSL distribution
https://guix.gnu.org/guix-refcard.pdf
https://gist.github.com/giuliano108/49ec5bd0a9339db98535bc793ceb5ab4
** Creating a root filesystem from a docker container

*** Enabling docker in Ubuntu in WSL

*** Export a root fs from busybox

    https://github.com/ForAllSecure/rootfs_builder

#+begin_src sh
mkdir rootfs && docker export $(docker create busybox) | tar -C rootfs -xvf -
#+end_src

** Workaround for guix pull ssl error

   https://github.com/giuliano108/guix-packages/issues/6

#+begin_src sh
guix pull --url=http://git.savannah.gnu.org/git/guix.git
#+end_src

** System setup
https://github.com/daviwil/dotfiles/blob/master/Systems.org#activating-profiles
https://raw.githubusercontent.com/daviwil/dotfiles/master/Systems.org


** Running an X server
https://techcommunity.microsoft.com/t5/windows-dev-appconsult/running-wsl-gui-apps-on-windows-10/ba-p/1493242

https://itnext.io/using-windows-10-as-a-desktop-environment-for-linux-7b2d8239f2f1

*** enable capture of windows key

    start vcxsrv with

    vcxsrv -ac -keyhook -nodecoration

    -ac disables authorization
    -keyhook passes through modifier keys

*** Remap caps to esc in windows
https://github.com/microsoft/PowerToys/releases/
    Install powertoys and remap in keyboard manager

https://www.isunshare.com/windows-10/add-on-screen-keyboard-to-taskbar-in-windows-10.html

** Boot script

   #+begin_src bash
#!/bin/sh
export GUIX_NEW_SYSTEM=$(readlink -f /var/guix/profiles/system)
# $GUIX_NEW_SYSTEM/boot needs this to exist even though /run is expected to be empty.
export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0
export LIBGL_ALWAYS_INDIRECT=1
# I installed GuixSD in a proper VM and /run is not on tmpfs, so I'm not sure.
ln -s none /run/current-system
/var/guix/profiles/system/profile/bin/guile --no-auto-compile $GUIX_NEW_SYSTEM/boot &

sleep 3
source /etc/profile

/sbin/mount.drvfs d: /mnt/d # mount external drive on startup

# why are these permissions not there in the first place?
for f in ping su sudo; do
        chmod 4755 $(readlink -f $(which $f))
done

su -l ianfit -c emacs # only run emacs for now
#su -l ianfit -c /home/ianfit/dotfiles/start-exwm.sh

   #+end_src


   #+begin_src scheme
;(use-modules (oop goops))
;(add-to-load-path "/root/.guix-profile/share/guile/site/3.0/")
;(use-modules (ice-9 readline))
;(activate-readline)

(use-modules
  (gnu)
  (guix profiles)
  (guix packages)
  (srfi srfi-1))

(use-service-modules networking ssh)
(use-package-modules screen vim)

(define os
(operating-system
  (host-name "daenerys")
  (timezone "Europe/Amsterdam")
  (locale "en_GB.utf8")

  (kernel hello)  ; dummy package
  (initrd (lambda* (. rest) (plain-file "dummyinitrd" "dummyinitrd")))
  (initrd-modules '())
  (firmware '())

  (bootloader
    (bootloader-configuration
      (bootloader
        (bootloader
          (name 'dummybootloader)
          (package hello)
          (configuration-file "/dev/null")
	  (configuration-file-generator (lambda* (. rest) (computed-file "dummybootloader" #~(mkdir #$output))))
          (installer #~(const #t))))))

  (file-systems (list (file-system
                        (device "/dev/sdb")
                        (mount-point "/")
                        (type "ext4")
                        (mount? #t))))  ; saying #f here doesn't work :(

  (users (cons (user-account
                (name "ianfit")
                (group "users")
                (password (crypt "InitialPassword!" "$6$abc"))
                (supplementary-groups '("wheel")))
               %base-user-accounts))

  (packages (append (list screen  ; global packages to add
                          vim)
              (remove
                  (lambda (x)
                    (member (package-name x)
                            (list "zile"  ; global packages to not add
                                  "nano"
                                  "info-reader"
                                  "pciutils"
                                  "usbutils"
                                  "util-linux-with-udev"
                                  "kmod"
                                  "eudev"
                                  "isc-dhcp"
                                  "iw"
                                  "wireless-tools")))
                  %base-packages)))

  (essential-services
    (remove
      (lambda (x)
        (member (service-type-name (service-kind x))
                (list 'firmware 'linux-bare-metal)))
      (operating-system-default-essential-services this-operating-system)))

  (services (list (service guix-service-type)
                  (service nscd-service-type)))))

; Hackish way to avoid building/including linux-module-database in the system,

(define hooks-modifier
  (eval '(record-modifier <profile> 'hooks)
    (resolve-module '(guix profiles))))

(define my-essential-services (operating-system-essential-services os))

(define system-service (car my-essential-services))
(unless (eq? 'system (service-type-name (service-kind system-service)))
  (raise-exception "The first essential service is not 'system'"))


(define kernel-profile (car (cdr (car (service-value system-service)))))
(unless (string=? "hello" (manifest-entry-name (car (manifest-entries (profile-content kernel-profile)))))
  (raise-exception "I was expecting 'hello' as the (dummy) kernel"))

(hooks-modifier kernel-profile '())

(define os
(operating-system
  (inherit os)
  (essential-services my-essential-services)))

os

   #+end_src

   #+begin_src sh :results output :wrap src scheme
guix package --export-manifest
   #+end_src

   #+RESULTS:
   #+begin_src scheme
   ;; This "manifest" file can be passed to 'guix package -m' to reproduce
   ;; the content of your profile.  This is "symbolic": it only specifies
   ;; package names.  To reproduce the exact same profile, you also need to
   ;; capture the channels being used, as returned by "guix describe".
   ;; See the "Replicating Guix" section in the manual.

   (specifications->manifest
     (list "emacs-pdf-tools"
	   "libgccjit"
	   "gccmakedep"
	   "gcc"
	   "mu"
	   "emacs-guix"
	   "emacs-geiser-guile"
	   "emacs-geiser"
	   "youtube-dl"
	   "extra-cmake-modules"
	   "cmake-shared"
	   "cmake"
	   "unzip"
	   "zlib"
	   "poppler"
	   "libpng"
	   "node"
	   "automake"
	   "autobuild"
	   "autoconf"
	   "sqlite"
	   "calibre"
	   "emacs-company-lsp"
	   "rsync"
	   "nss-certs"
	   "password-store"
	   "rclone"
	   "libvterm"
	   "emacs-vterm"
	   "make"
	   "gcc-toolchain@10"
	   "helm"
	   "xeyes"
	   "feh"
	   "picom"
	   "git"
	   "pinentry"
	   "gnupg"
	   "openssh"
	   "emacs"
	   "openssl"))
   #+end_src

   #+begin_src scheme :tangle ~/.config/guix/channels.scm
(list (channel
        (name 'channel-x)
        (url "file:///home/daviwil/Projects/Code/channel-x"))
      (channel
        (name 'flat)
        (url "https://github.com/flatwhatson/guix-channel.git")
        (commit
          "7b8353ebbcf486e3344924d1cac0fa7ba47c371d")
        (introduction
          (make-channel-introduction
            "33f86a4b48205c0dc19d7c036c85393f0766f806"
            (openpgp-fingerprint
              "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
      (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix"))
      (channel
        (name 'guix)
        (url "https://git.savannah.gnu.org/git/guix.git")
        ;; (url "file:///home/daviwil/Projects/Code/guix"))
        (introduction
          (make-channel-introduction
            "9edb3f66fd807b096b48283debdcddccfea34bad"
            (openpgp-fingerprint
              "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
   #+end_src
